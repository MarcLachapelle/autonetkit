Searching 553 files for "config_stanza"

/Users/simonknight/Dropbox/PhD/Dev/autonetkit/autonetkit/ank_json.py:
   29              log.warning("%s is anm overlay_edge. Use attribute rather than object in compiler." % obj)
   30              return str(obj)
   31:         if isinstance(obj, autonetkit.nidb.config_stanza):
   32              retval = obj.to_json()
   33              return retval
   ..
   99                  pass # not a string
  100  # handle lists of IP addresses
  101:             if isinstance(val, dict) and val.get("_config_stanza") == True:
  102:                 val = autonetkit.nidb.config_stanza(**val)
  103                  inst[key] = val # update with (possibly) updated list
  104

/Users/simonknight/Dropbox/PhD/Dev/autonetkit/autonetkit/compilers/device/cisco.py:
    8  from autonetkit.compiler import sort_sessions
    9  from autonetkit.compilers.device.router_base import RouterCompiler
   10: from autonetkit.nidb import config_stanza
   11
   12
   ..
  195                  if session.exclude and session.vrf:
  196                      data = self.ibgp_session_data(session, ip_version=4)
  197:                     stanza = config_stanza(data)
  198                      vrf_ibgp_neighbors[session.vrf].append(stanza)
  199
  ...
  202                  if session.exclude and session.vrf:
  203                      data = self.ibgp_session_data(session, ip_version=6)
  204:                     stanza = config_stanza(data)
  205                      vrf_ibgp_neighbors[session.vrf].append(stanza)
  206
  ...
  212                  if session.exclude and session.vrf:
  213                      data = self.ebgp_session_data(session, ip_version=4)
  214:                     stanza = config_stanza(data)
  215                      vrf_ebgp_neighbors[session.vrf].append(stanza)
  216
  ...
  218                  if session.exclude and session.vrf:
  219                      data = self.ebgp_session_data(session, ip_version=6)
  220:                     stanza = config_stanza(data)
  221                      vrf_ebgp_neighbors[session.vrf].append(stanza)
  222
  ...
  224                  rd_index = vrf_node.rd_indices[vrf]
  225                  rd = '%s:%s' % (node.asn, rd_index)
  226:                 stanza = config_stanza(
  227                      vrf=vrf,
  228                      rd=rd,
  ...
  241              if vpnv4_node.retain_route_target:
  242                  retain = True
  243:             node.bgp.vpnv4 = config_stanza(retain_route_target = retain)
  244
  245      def vrf_igp_interfaces(self, node):
  ...
  269                  rd = '%s:%s' % (node.asn, rd_index)
  270
  271:                 stanza = config_stanza(vrf = vrf, rd = rd, route_target = route_target)
  272                  node.vrf.vrfs.append(stanza)
  273
  ...
  317                      continue  # don't configure IGP for this interface
  318
  319:                 #TODO: use config_stanza here
  320                  interface.ospf = {
  321                      'cost': ospf_int.cost,
  ...
  489
  490          for peer in node.bgp.ibgp_neighbors:
  491:             peer = config_stanza(peer)
  492              peer.remote_ip = peer.loopback
  493              if peer.use_ipv4:
  ...
  501
  502          for peer in node.bgp.ibgp_rr_parents:
  503:             peer = config_stanza(peer)
  504              peer.remote_ip = peer.loopback
  505              if peer.use_ipv4:
  ...
  513
  514          for peer in node.bgp.ibgp_rr_clients:
  515:             peer = config_stanza(peer)
  516              peer.rr_client = True
  517              peer.remote_ip = peer.loopback
  ...
  526
  527          for peer in node.bgp.ebgp_neighbors:
  528:             peer = config_stanza(peer)
  529              peer.is_ebgp = True
  530              peer.remote_ip = peer.dst_int_ip
  ...
  545                      continue
  546
  547:                 neigh_data = config_stanza(neigh)
  548                  vpnv4_neighbors.append(neigh_data)
  549
  ...
  551                  if not neigh.use_ipv4:
  552                      continue
  553:                 neigh_data = config_stanza(neigh)
  554                  neigh_data.rr_client = True
  555                  vpnv4_neighbors.append(neigh_data)
  ...
  558                  if not neigh.use_ipv4:
  559                      continue
  560:                 neigh_data = config_stanza(neigh)
  561                  vpnv4_neighbors.append(neigh_data)
  562
  ...
  586          for interface in mpls_te_node.physical_interfaces:
  587              nidb_interface = self.nidb.interface(interface)
  588:             stanza = config_stanza(id = nidb_interface.id,
  589                                     bandwidth_percent = 100)
  590              rsvp_interfaces.append(stanza)
  ...
  614                  #TODO: for here and below use stanza directly
  615                  data = {'id': interface.id, 'passive': False}
  616:                 stanza = config_stanza(**data)
  617                  if node.eigrp.use_ipv4:
  618                      ipv4_interfaces.append(stanza)
  ...
  622          loopback_zero = node.loopback_zero
  623          data = {'id': node.loopback_zero.id, 'passive': True}
  624:         stanza = config_stanza(**data)
  625          if node.eigrp.use_ipv4:
  626              ipv4_interfaces.append(stanza)
  ...
  653
  654                  #TODO: make stanza
  655:                 stanza = config_stanza(**data)
  656                  node.isis.isis_links.append(stanza)
  657

/Users/simonknight/Dropbox/PhD/Dev/autonetkit/autonetkit/compilers/device/quagga.py:
    2  # -*- coding: utf-8 -*-
    3  from autonetkit.compilers.device.router_base import RouterCompiler
    4: from autonetkit.nidb import config_stanza
    5
    6
    .
   47              bgp_int = self.anm['ebgp_v4'].interface(interface)
   48              if bgp_int.is_bound:  # ebgp interface
   49:                 node.ospf.passive_interfaces.append(config_stanza(id=interface.id))
   50                  subnet = bgp_int['ipv4'].subnet
   51                  default_ebgp_area = 0
   52                  node.ospf.ospf_links.append(
   53:                     config_stanza(network=subnet,
   54                          area=default_ebgp_area))
   55

/Users/simonknight/Dropbox/PhD/Dev/autonetkit/autonetkit/compilers/device/router_base.py:
    3  from autonetkit.compiler import sort_sessions
    4  from autonetkit.compilers.device.device_base import DeviceCompiler
    5: from autonetkit.nidb import config_stanza
    6
    7  import autonetkit.plugins.naming as naming
    .
   36              use_ipv6 = True
   37
   38:         #TODO: return config_stanza rather than a dict
   39          data = {  # TODO: this is platform dependent???
   40              'neighbor': neigh.label,
   ..
   63              use_ipv6 = True
   64
   65:         #TODO: return config_stanza rather than a dict
   66          data = {  # TODO: change templates to access from node.bgp.lo_int
   67              'neighbor': neigh.label,
   ..
  266                  area = str(area)  # can't serialize IPAddress object to JSON
  267                  #TODO: put in interface rather than interface.id for consistency
  268:                 stanza = config_stanza(id = interface.id,
  269                          cost = int(ospf_int.cost), passive = False)
  270
  ...
  282          router_area = ospf_loopback_zero.area  # area assigned to router
  283          router_area = str(router_area)  # can't serialize IPAddress object to JSON
  284:         stanza = config_stanza(id = node.loopback_zero.id,
  285              cost = 0, passive = True)
  286          interfaces_by_area[router_area].append(stanza)
  287
  288:         node.ospf.interfaces_by_area = config_stanza(**interfaces_by_area)
  289
  290          added_networks = set()
  ...
  311                  not in added_networks:  # don't add more than once
  312                  added_networks.add(network)
  313:                 link_stanza = config_stanza(network = network, interface = interface, area = ospf_int.area)
  314                  node.ospf.ospf_links.append(link_stanza)
  315
  ...
  348
  349              data = self.ibgp_session_data(session, ip_version=4)
  350:             bgp_stanza = config_stanza(**data)
  351
  352              direction = session.direction
  ...
  367                      continue  # exclude from regular ibgp config (eg VRF, VPLS, etc)
  368                  data = self.ibgp_session_data(session, ip_version=6)
  369:                 bgp_stanza = config_stanza(**data)
  370
  371                  direction = session.direction
  ...
  392                  continue  # exclude from regular ibgp config (eg VRF, VPLS, etc)
  393              data = self.ebgp_session_data(session, ip_version=4)
  394:             bgp_stanza = config_stanza(**data)
  395              ebgp_neighbors.append(bgp_stanza)
  396
  ...
  403                      continue  # exclude from regular ibgp config (eg VRF, VPLS, etc)
  404                  data = self.ebgp_session_data(session, ip_version=6)
  405:                 bgp_stanza = config_stanza(**data)
  406                  ebgp_neighbors.append(bgp_stanza)
  407

/Users/simonknight/Dropbox/PhD/Dev/autonetkit/autonetkit/compilers/device/server_base.py:
    3  import autonetkit.log as log
    4  from autonetkit.compilers.device.device_base import DeviceCompiler
    5: from autonetkit.nidb import config_stanza
    6
    7  class ServerCompiler(DeviceCompiler):

/Users/simonknight/Dropbox/PhD/Dev/autonetkit/autonetkit/compilers/device/ubuntu.py:
    3  import autonetkit.log as log
    4  from autonetkit.compilers.device.server_base import ServerCompiler
    5: from autonetkit.nidb import config_stanza
    6
    7  class UbuntuCompiler(ServerCompiler):
    .
   80                  % (asn, gateway),
   81                  }
   82:                 route_entry = config_stanza(**route_entry)
   83                  if infra_route.prefixlen == 32:
   84                      host_routes_v4.append(route_entry)
   ..
   99                          % (asn, gateway),
  100                      }
  101:                 route_entry = config_stanza(**route_entry)
  102                  if asn_route.prefixlen == 32:
  103                      host_routes_v4.append(route_entry)

/Users/simonknight/Dropbox/PhD/Dev/autonetkit/autonetkit/compilers/platform/cisco.py:
   14                                                 StarOsCompiler)
   15  from autonetkit.compilers.platform.platform_base import PlatformCompiler
   16: from autonetkit.nidb import config_stanza
   17
   18
   ..
  314                      interface.id = self.numeric_to_interface_label_nxos(interface.numeric_id)
  315
  316:             DmNode.supported_features = config_stanza(mpls_te = False, mpls_oam = False, vrf = False)
  317
  318              nxos_compiler.compile(DmNode)

/Users/simonknight/Dropbox/PhD/Dev/autonetkit/autonetkit/compilers/platform/dynagen.py:
    5  import autonetkit.ank as ank
    6  from autonetkit.compilers.device.cisco import IosClassicCompiler
    7: from autonetkit.nidb import config_stanza
    8
    9  class DynagenCompiler(PlatformCompiler):

/Users/simonknight/Dropbox/PhD/Dev/autonetkit/autonetkit/compilers/platform/junosphere.py:
    5  import autonetkit.ank as ank
    6  #from autonetkit.compilers.device.
    7: from autonetkit.nidb import config_stanza
    8
    9  class JunosphereCompiler(PlatformCompiler):

/Users/simonknight/Dropbox/PhD/Dev/autonetkit/autonetkit/compilers/platform/netkit.py:
   10  from autonetkit.ank_utils import alphabetical_sort as alpha_sort
   11  from autonetkit.compilers.device.quagga import QuaggaCompiler
   12: from autonetkit.nidb import config_stanza
   13
   14  class NetkitCompiler(PlatformCompiler):
   ..
  116                  #netkit lab.conf uses 1 instead of eth1
  117                  numeric_id = interface.numeric_id
  118:                 stanza = config_stanza(
  119                      device=naming.network_hostname(node),
  120                      key=numeric_id,
  ...
  126          for node in subgraph:
  127              if node.tap:
  128:                 stanza = config_stanza(
  129                      device=naming.network_hostname(node),
  130                      id=node.tap.id.replace("eth", ""),  # strip ethx -> x

/Users/simonknight/Dropbox/PhD/Dev/autonetkit/autonetkit/nidb/config_stanza.py:
    1  # based on http://docs.python.org/2.7/library/collections#collections.OrderedDict
    2  # and http://stackoverflow.com/q/455059
    3: class config_stanza(object):
    4      def __init__(self, *args, **kwargs):
    5:         if len(args) == 1 and isinstance(args[0], config_stanza):
    6              # Clone the data (shallow copy)
    7              #TODO: check how this relates to calling dict() on a dict - same?
    .
   23      def to_json(self):
   24          retval = OrderedDict(self._odict) # clone to append to
   25:         retval['_config_stanza'] = True
   26          return retval
   27
   28      def add_stanza(self, name, **kwargs):
   29          """Adds a sub-stanza to this stanza"""
   30:         stanza = config_stanza(**kwargs)
   31          self[name] = stanza
   32          return stanza
   ..
   37      def __setitem__(self, key, value):
   38          if isinstance(value, dict):
   39:             log.warning("Adding dictionary %s: did you mean to add a config_stanza?" % key)
   40          self._odict[key] = value
   41

/Users/simonknight/Dropbox/PhD/Dev/autonetkit/autonetkit/nidb/devices_model.py:
  300          if self.get(name):
  301              value = self.get(name)
  302:             if isinstance(value, config_stanza):
  303                  # Don't recreate
  304                  self.log.debug("Stanza %s already exists" % name)
  ...
  308                  log.warning("Creating stanza: %s already set as %s for %s" % (name, type(value), self))
  309
  310:         stanza = config_stanza(**kwargs)
  311          self.__setattr__(name, stanza)
  312          return stanza
  ...
  505
  506          #TODO: remove once deprecated DmNode_category
  507:         if isinstance(data, config_stanza):
  508              return data
  509
  ...
  542  class lab_topology(object):
  543      """API to access lab topology in network"""
  544:     #TODO: replace this with config_stanza
  545
  546      def __init__(self, nidb, topology_id):

57 matches across 12 files
