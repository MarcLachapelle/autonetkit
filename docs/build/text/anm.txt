
Abstract Network Model
**********************

class class autonetkit.anm.OverlayBase(anm, overlay_id)

   Base class for overlays - overlay graphs, subgraphs, projections,
   etc

   data

      Returns data stored on this overlay graph

   device(key)

      To access programatically

   edge(edge_to_find, dst_to_find=None)

      returns edge in this graph with same src and same edge_id

   groupby(attribute, nodes=None)

      Returns a dictionary sorted by attribute

      >>> G_in.groupby("asn")
      {u'1': [r1, r2, r3, sw1], u'2': [r4]}

   has_edge(edge)

      Tests if edge in graph

   node(key)

      Returns node based on name This is currently O(N). Could use a
      lookup table

   overlay(key)

      Get to other overlay graphs in functions

   routers(*args, **kwargs)

      Shortcut for nodes(), sets device_type to be router

class class autonetkit.anm.OverlayEdge(anm, overlay_id, src_id, dst_id)

   API to access link in network

   attr_any(*args)

      Return edges which either src and dst have attributes set

   attr_both(*args)

      Return edges which both src and dst have attributes set

   attr_equal(*args)

      Return edges which both src and dst have attributes equal

   bind_interface(node, interface)

      Bind this edge to specified index

   dst

      Destination node of edge

   dst_int

      Interface bound to destination node of edge

   get(key)

      For consistency, edge.get(key) is neater than getattr(edge, key)

   set(key, val)

      For consistency, edge.set(key, value) is neater than
      setattr(edge, key, value)

   src

      Source node of edge

   src_int

      Interface bound to source node of edge

class class autonetkit.anm.OverlayGraph(anm, overlay_id)

   API to interact with an overlay graph in ANM

   add_edge(src, dst, retain=None, **kwargs)

      Adds an edge to the overlay

   add_edges(*args, **kwargs)

      Adds a set of edges. Alias for add_edges_from

   add_edges_from(ebunch, bidirectional=False, retain=None, **kwargs)

      Add edges. Unlike NetworkX, can only add an edge if both  src
      and dst in graph already. If they are not, then they will not be
      added (silently ignored)

      Bidirectional will add edge in both directions. Useful if going
      from an undirected graph to a directed, eg G_in to G_bgp

   add_node(node, retain=None, **kwargs)

      Adds node to overlay

   add_nodes_from(nbunch, retain=None, update=False, **kwargs)

      Update won't append data (which could clobber) if node exists

   allocate_interfaces()

      allocates edges to interfaces

   anm

      Returns anm for this overlay

   remove_edges_from(ebunch)

      Removes set of edges from ebunch

   remove_node(node)

      Removes a node from the overlay

   update(nbunch=None, **kwargs)

      Sets property defined in kwargs to all nodes in nbunch

   update_edges(ebunch=None, **kwargs)

      Sets property defined in kwargs to all edges in ebunch

class class autonetkit.anm.OverlayGraphData(anm, overlay_id)

   API to access link in network

class class autonetkit.anm.OverlayNode(anm, overlay_id, node_id)

   OverlayNode

   add_interface(*args, **kwargs)

      Public function to add interface

   add_loopback(*args, **kwargs)

      Public function to add a loopback interface

   asn

      Returns ASN of this node

   degree()

      Returns degree of node

   dump()

      Dump attributes of this node

   edges(*args, **kwargs)

      Edges to/from this node

   get(key)

      For consistency, node.get(key) is neater than getattr(node, key)

   id

      Returns node id

   interface(key)

      Returns interface based on interface id

   interfaces(*args, **kwargs)

      Public function to view interfaces

   is_l3device

      Layer 3 devices: router, server, cloud, host ie not switch

   is_router

      Either from this graph or the physical graph

   is_server

      Returns if device is a server

   is_switch

      Returns if device is a switch

   label

      Returns node label (mapped from ANM)

   neighbors(*args, **kwargs)

      Returns neighbors of node

   phy

      Shortcut back to physical OverlayNode Same as node.overlay.phy
      ie node.phy.x is same as node.overlay.phy.x

   set(key, val)

      For consistency, node.set(key, value) is neater  than
      setattr(node, key, value)

class class autonetkit.anm.OverlaySubgraph(anm, overlay_id, graph, name=None)

   OverlaySubgraph
